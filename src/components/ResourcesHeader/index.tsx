import React, { useMemo, useState } from 'react';
import styles from './index.module.scss';
import { useAppSelector } from '../../app/hooks';
import { selectResources, selectSpheres, selectManualClickPower, selectedCountry, selectStage } from '../../app/gameSlice';
import CountUp from '../CountUp';

interface TooltipData {
  isVisible: boolean;
  type: 'sphere' | 'main' | 'country' | 'earth';
  sphere?: string;
  position: { x: number; y: number };
}

const tooltipInfo: Record<string, string> = {
  'economy': '–≠–∫–æ–Ω–æ–º–∏–∫–∞: –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã, —É–ª—É—á—à–∞—è —Ä—ã–Ω–∫–∏, –±–∞–Ω–∫–∏. –ü–æ–±–µ–¥–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100–º–º',
  'science': '–ù–∞—É–∫–∞: —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å—Ç—Ä–æ—è —Å–ø—É—Ç–Ω–∏–∫–∏ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –ü–æ–±–µ–¥–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100–º–º',
  'faith': '–í–µ—Ä–∞: —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ —á–µ—Ä–µ–∑ —Ö—Ä–∞–º—ã –∏ –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–µ–≤. –ü–æ–±–µ–¥–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100–º–º',
  'main': '', // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  'country': '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–µ–π—á–∞—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ. –û–±—ä–µ–¥–µ–Ω–∏—Ç–µ –ó–µ–º–ª—é, –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–æ–π —É–≥—Ä–æ–∑–µ.',
  'earth': '–¢–µ–ø–µ—Ä—å –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ó–µ–º–ª–µ–π, —Å—É–¥—å–±–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ –ª–µ–∂–∏—Ç –Ω–∞ –≤–∞—à–∏—Ö –ø–ª–µ—á–∞—Ö.'
};

const ResourcesHeader: React.FC = () => {
  const resources = useAppSelector(selectResources);
  const spheres = useAppSelector(selectSpheres);
  const clickPower = useAppSelector(selectManualClickPower);
  const countryName = useAppSelector(selectedCountry);
  const stage = useAppSelector(selectStage);
  const [tooltip, setTooltip] = useState<TooltipData>({ 
    isVisible: false,
    type: 'sphere',
    position: { x: 0, y: 0 } 
  });

  const handleMouseEnter = (type: 'sphere' | 'main' | 'country' | 'earth', sphere?: string, e?: React.MouseEvent) => {
    if (!e) return;
    
    const rect = e.currentTarget.getBoundingClientRect();
    setTooltip({
      isVisible: true,
      type,
      sphere,
      position: { 
        x: rect.left, 
        y: rect.bottom + 5 
      }
    });
  };

  const handleMouseLeave = () => {
    setTooltip({ ...tooltip, isVisible: false });
  };

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—É–ª—Ç–∏–ø–∞
  const getTooltipContent = () => {
    switch (tooltip.type) {
      case 'sphere':
        if (tooltip.sphere) {
          return tooltipInfo[tooltip.sphere] || `${tooltip.sphere}: –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç—Ç—É —Å—Ñ–µ—Ä—É —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è.`;
        }
        break;
      case 'main':
        return `–ö–ª–∏–∫–∞–π –Ω–∞ —Å—Ç—Ä–∞–Ω—É: +${Math.round(clickPower)}‚Çø –∑–∞ –∫–ª–∏–∫.`;
      case 'country':
        return tooltipInfo.country;
      case 'earth':
        return tooltipInfo.earth;
      default:
        break;
    }
    return '';
  };
  const getRandomEarth = useMemo(() => {
    const names = ['íÜ†', 'Er·π£etu', 'Terra', 'Mi√∞gar√∞r', 'TlƒÅlticpac', 'üåç']
    return Math.random() <= 0.05 ? names[Math.floor(Math.random() * names.length)] : 'Earth';
  }, []);

  return (
    <div className={styles.resourcesHeader}>
      <div className={styles.spheresContainer}>
        {Object.entries(spheres).map(([key, sphere]) => (
          <div 
            key={key} 
            className={styles.sphereResource}
            onMouseEnter={(e) => handleMouseEnter('sphere', key, e)}
            onMouseLeave={handleMouseLeave}
          >
            <div className={styles.sphereIcon}>{sphere.icon}</div>
            <div className={styles.sphereValue}>
              <CountUp 
                value={sphere.resources} 
                duration={750} 
                showColors
                className={styles.counter}
              />
            </div>
          </div>
        ))}
      </div>
      
      <div 
        className={styles.countryInfo}
        onMouseEnter={(e) => handleMouseEnter(stage === 2 ? 'earth' : 'country', undefined, e)}
        onMouseLeave={handleMouseLeave}
      >
        {stage === 2 ? getRandomEarth : countryName || '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'}
      </div>
      
      <div 
        className={styles.mainResources}
        onMouseEnter={(e) => handleMouseEnter('main', undefined, e)}
        onMouseLeave={handleMouseLeave}
      >
        <div className={styles.icon}>üí∞</div>
        <CountUp value={resources} suffix="‚Çø" duration={950} showColors className={styles.value} />
      </div>
      
      {tooltip.isVisible && (
        <div 
          className={styles.tooltip} 
          style={{ 
            left: `${tooltip.position.x}px`, 
            top: `${tooltip.position.y}px` 
          }}
        >
          {getTooltipContent()}
        </div>
      )}
    </div>
  );
};

export default ResourcesHeader; 